BREADTH FIRST SEARCH ALGORITHM 

STEP BY STEP APPROACH

Main Function: minimumDiameterAfterMerge
Calculate the number of nodes for each tree:

n is the number of nodes in Tree 1.
m is the number of nodes in Tree 2.
Build adjacency lists for both trees:

Call buildAdjList(n, edges1) to construct the adjacency list for the first tree.
Call buildAdjList(m, edges2) to construct the adjacency list for the second tree.
Calculate the diameters of both trees:

Call findDiameter(n, adjList1) to find the diameter of the first tree.
Call findDiameter(m, adjList2) to find the diameter of the second tree.
Calculate the longest path that spans across both trees:

Calculate combinedDiameter as the sum of half the diameters of both trees, plus 1 (rounded up).
Return the maximum of the three possibilities:

Return the maximum of diameter1, diameter2, and combinedDiameter.
buildAdjList function:
Create an adjacency list of size size.
For each edge in edges, add the nodes to each other's adjacency list.
findDiameter function:
Call findFarthestNode(n, adjList, 0) to find the farthest node from an arbitrary starting node (e.g., node 0).
Call findFarthestNode(n, adjList, farthestNode) from the previously found farthest node to determine the tree diameter.
findFarthestNode function:
Initialize a queue and a visited array to perform BFS starting from sourceNode.
Traverse the graph, updating the farthest node each time a node is dequeued.
Return the farthest node and the distance (diameter).